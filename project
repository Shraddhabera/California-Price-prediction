import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split, GridSearchCV
from sklearn.preprocessing import StandardScaler
from sklearn.linear_model import LinearRegression
from sklearn.ensemble import RandomForestRegressor
from xgboost import XGBRegressor
from sklearn.metrics import mean_squared_error, r2_score

from sklearn.datasets import fetch_california_housing
data = fetch_california_housing()
df = pd.DataFrame(data.data, columns=data.feature_names)
df['PRICE'] = data.target 


print(df.head())


print("\nMissing values:\n", df.isnull().sum())


print("\nDataset Description:\n", df.describe())


plt.figure(figsize=(10, 6))
sns.heatmap(df.corr(), annot=True, cmap="coolwarm", linewidths=1)
plt.title("Feature Correlation Heatmap")
plt.show()

sns.pairplot(df[['PRICE', 'MedInc', 'AveRooms', 'AveOccup', 'Latitude', 'Longitude']])
plt.show()



X = df.drop(columns=['PRICE'])  
y = df['PRICE']


X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)


scaler = StandardScaler()
X_train_scaled = scaler.fit_transform(X_train)
X_test_scaled = scaler.transform(X_test)



def evaluate_model(model, X_train, X_test, y_train, y_test, model_name):
    model.fit(X_train, y_train)
    y_pred = model.predict(X_test)
    
    r2 = r2_score(y_test, y_pred)
    mse = mean_squared_error(y_test, y_pred)
    
    print(f"\nðŸ“Š {model_name} Performance:")
    print(f"RÂ² Score: {r2:.4f}")
    print(f"Mean Squared Error: {mse:.4f}")


    plt.figure(figsize=(8, 5))
    sns.scatterplot(x=y_test, y=y_pred, alpha=0.6)
    plt.xlabel("Actual Prices")
    plt.ylabel("Predicted Prices")
    plt.title(f"{model_name}: Actual vs Predicted")
    plt.show()
    
lr = LinearRegression()
evaluate_model(lr, X_train_scaled, X_test_scaled, y_train, y_test, "Linear Regression")


rf = RandomForestRegressor(n_estimators=200, max_depth=10, random_state=42)
evaluate_model(rf, X_train, X_test, y_train, y_test, "Random Forest Regressor")


xgb = XGBRegressor(n_estimators=300, learning_rate=0.05, max_depth=6, random_state=42)
evaluate_model(xgb, X_train, X_test, y_train, y_test, "XGBoost Regressor")


feature_importances = rf.feature_importances_
sorted_idx = np.argsort(feature_importances)

plt.figure(figsize=(8, 5))
plt.barh(np.array(X.columns)[sorted_idx], feature_importances[sorted_idx], color="skyblue")
plt.xlabel("Feature Importance")
plt.title("Feature Importance (Random Forest)")
plt.show()
